move_group.launch

<launch>
    <include file="$(find fetch_moveit_config)/launch/planning_context.launch" />

    <!-- GDB Debug Option -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg     if="$(arg debug)" name="launch_prefix"
         value="gdb -x $(find fetch_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

    <!-- Verbose Mode Option -->
    <arg name="info" default="$(arg debug)" />
    <arg unless="$(arg info)" name="command_args" value="" />
    <arg     if="$(arg info)" name="command_args" value="--debug" />

    <!-- move_group settings -->
    <arg name="allow_trajectory_execution" default="true"/>
    <arg name="allow_active_sensing" default="false"/>
    <arg name="fake_execution" default="false"/>
    <arg name="max_safe_path_cost" default="1"/>
    <arg name="jiggle_fraction" default="0.05" />
    <arg name="publish_monitored_planning_scene" default="true"/>
    <arg name="pipeline" default="$(optenv PLANNING_PIPELINE ompl)" />

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(find fetch_moveit_config)/launch/planning_pipeline.launch.xml">
        <arg name="pipeline" value="$(arg pipeline)" />
    </include>

    <!-- Trajectory Execution Functionality -->
    <include ns="move_group" file="$(find fetch_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
        <arg name="moveit_manage_controllers" value="true" />
        <arg name="moveit_controller_manager" value="fetch" unless="$(arg fake_execution)"/>
        <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    </include>

    <!-- Sensors Functionality -->
    <rosparam command="delete" param="move_group/sensors" />
    <include ns="move_group" file="$(find fetch_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_active_sensing)">
        <arg name="moveit_sensor_manager" value="fetch" />
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
        <!-- Set the display variable, in case OpenGL code is used internally -->
        <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

        <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
        <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

        <!-- MoveGroup capabilities to load -->
        <param name="capabilities" value="move_group/MoveGroupCartesianPathService
               move_group/MoveGroupExecuteService
               move_group/MoveGroupKinematicsService
               move_group/MoveGroupMoveAction
               move_group/MoveGroupPickPlaceAction
               move_group/MoveGroupPlanService
               move_group/MoveGroupQueryPlannersService
               move_group/MoveGroupStateValidationService
               move_group/MoveGroupGetPlanningSceneService
               move_group/ClearOctomapService
               " />

        <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
        <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
        <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
        <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
        <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
    </node>

</launch>

-----------------------------------------------------------------------------------

planning context.launch

<launch>

    <!-- By default we do not overwrite the URDF. Change the following to true to change the default behavior -->
    <arg name="load_robot_description" default="false"/>

    <!-- The name of the parameter under which the URDF is loaded -->
    <arg name="robot_description" default="robot_description"/>

    <!-- Load universal robot description format (URDF) -->
    <param if="$(arg load_robot_description)" name="$(arg robot_description)" textfile="$(find fetch_description)/robots/fetch.urdf"/>

    <!-- The semantic description that corresponds to the URDF -->
    <param name="$(arg robot_description)_semantic" textfile="$(find fetch_moveit_config)/config/fetch.srdf" />

    <!-- Load updated joint limits (override information from URDF) -->
    <group ns="$(arg robot_description)_planning">
        <rosparam command="load" file="$(find fetch_moveit_config)/config/joint_limits.yaml"/>
    </group>

    <!-- Load default settings for kinematics; these settings are overridden by settings in a node's namespace -->
    <group ns="$(arg robot_description)_kinematics">
        <rosparam command="load" file="$(find fetch_moveit_config)/config/kinematics.yaml"/>
    </group>

</launch>

-----------------------------------------------------------------------------------

ompl_planning_pipeline.launch

<launch>

    <!-- OMPL Plugin for MoveIt! -->
    <arg name="planning_plugin" value="ompl_interface/OMPLPlanner" />

    <!-- The request adapters (plugins) used when planning with OMPL.
    ORDER MATTERS -->
    <arg name="planning_adapters" value="default_planner_request_adapters/AddTimeParameterization
         default_planner_request_adapters/FixWorkspaceBounds
         default_planner_request_adapters/FixStartStateBounds
         default_planner_request_adapters/FixStartStateCollision
         default_planner_request_adapters/FixStartStatePathConstraints" />

    <arg name="start_state_max_bounds_error" value="0.1" />

    <param name="planning_plugin" value="$(arg planning_plugin)" />
    <param name="request_adapters" value="$(arg planning_adapters)" />
    <param name="start_state_max_bounds_error" value="$(arg start_state_max_bounds_error)" />

    <rosparam command="load" file="$(find fetch_moveit_config)/config/ompl_planning.yaml"/>

</launch>

-----------------------------------------------------------------------------------

(fetch)_trajectory_execution.launch.xml

<launch>

    <!-- This file makes it easy to include the settings for trajectory execution  -->

    <!-- Flag indicating whether MoveIt! is allowed to load/unload  or switch controllers -->
    <arg name="moveit_manage_controllers" default="true"/>
    <param name="moveit_manage_controllers" value="$(arg moveit_manage_controllers)"/>

    <!-- When determining the expected duration of a trajectory, this multiplicative factor is applied to get the allowed duration of execution -->
    <param name="allowed_execution_duration_scaling" value="1.2"/> <!-- default 1.2 -->
    <!-- Allow more than the expected execution time before triggering a trajectory cancel (applied after scaling) -->
    <param name="allowed_goal_duration_margin" value="0.5"/> <!-- default 0.5 -->

    <!-- Load the robot specific controller manager; this sets the moveit_controller_manager ROS parameter -->
    <arg name="moveit_controller_manager" default="fetch" />
    <include file="$(find fetch_moveit_config)/launch/$(arg moveit_controller_manager)_moveit_controller_manager.launch.xml" />

</launch>

-----------------------------------------------------------------------------------


(fetch)_moveit_sensor_manager.launch.xml

<launch>

    <!-- Set the file describing which sensor(s) to use to build the octomap  -->
    <arg name="moveit_octomap_sensor_params_file" default="$(find fetch_moveit_config)/config/sensors.yaml" />

    <!-- Params for the octomap monitor -->
    <param name="octomap_frame" type="string" value="base_link" />
    <param name="octomap_resolution" type="double" value="0.05" />

    <!-- sensors used to update the map -->
    <rosparam command="load" file="$(arg moveit_octomap_sensor_params_file)" />

</launch>























